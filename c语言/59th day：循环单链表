                            //循环单链表
// typedef struct Node{
//     int data;
//     struct Node* next;
// } Node;

// Node* initList(){
//     Node* list = (Node*)malloc(sizeof(Node));
//     list->data = 0;
//     list->next = list;
//     return list;
// }

// void anyInsert(Node* list, int data, int n){
//     if (n < 1 || n > list->data+1){
//         puts("Please the number within the range.");
//         return;
//     }
//     int cnt = 0;
//     Node* newNode = (Node*)malloc(sizeof(Node));
//     Node* p = list;
//     newNode->data = data;
//     while (cnt < n - 1){
//         p = p->next;
//         cnt++;       
//     }
//     newNode->next = p->next;
//     p->next = newNode;
//     list->data++;
// }

// void deleteAnyNode(Node* list, int n){
//     if (n < 1 || n > list->data){
//         puts("\nPlease the number within the range.");
//         return;
//     }
//     Node* p = list;
//     int cnt = 0;
//     while (cnt < n - 1){
//         p = p->next;
//         cnt++;
//     }
//     Node* temp = p;
//     p = p->next;
//     temp->next = p->next;
//     free(p);
//     list->data--;
// }

// void printList(Node* list){
//     Node* p = list->next;
//     while (p != list){
//         printf("%d ",p->data);
//         p = p->next;
//     }
// }

// int main(){
//     Node* list = initList();
//     anyInsert(list,1,1);
//     anyInsert(list,2,2);
//     anyInsert(list,3,3);
//     printList(list);
//     deleteAnyNode(list,0);
//     printf("%d\n",list->data);
//     deleteAnyNode(list,2);
//     printList(list);
//     putchar('\n');
//     printf("%d\n",list->data);
// }
